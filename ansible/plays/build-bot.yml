---
- name: prepare build environment
  tags: prepare-env
  hosts: windows-devel
  tasks:
    # Note: PyInstaller requires pywin32 on Windows.
    #       There are two ways to install pywin32 on Windows:
    #       - "choco install pywin32", which requires `python` and `7zip.installer`, or
    #       - "pip install pypiwin32", because it has ready wheels for windows.
    #       Choco's `python` and `python2` packages differ. The former is sometimes
    #       Python 3.5, but sometimes (sic!) is Python 2.7.11. The latter (python2) is
    #       the bleeding edge Python 2.7.12. Since choco's pywin32 package requires
    #       a little more than it should, I opt for the pip way.
    - name: install o/s packages
      win_chocolatey: name={{item}} upgrade={{reset|bool}}
      register: _install_pkg
      with_items:
        - upx
        - 7zip.commandline
        - python2

    - name: current system path
      raw: "[System.Environment]::GetEnvironmentVariable('PATH', 'machine')"
      register: _path
      changed_when: false

    - name: put python on system path
      # Ansible does not support path appending, so we use SetEnvironmentVariable.
      # PR: https://github.com/ansible/ansible-modules-extras/issues/2215
      when: item not in _path.stdout.split(';')
      raw: "[System.Environment]::SetEnvironmentVariable('PATH', [System.Environment]::GetEnvironmentVariable('PATH', 'machine') + ';{{item}}', 'machine')"
      with_items:
        - 'C:\Python2.7'
        - 'C:\Python2.7\Scripts'

    - name: upgrade pip
      when: _install_pkg|changed or reset|bool
      raw: python -m pip install --upgrade pip setuptools wheel
      register: _upgrade_pip
      changed_when: _upgrade_pip.stdout.find('Installing ') >= 0

    - name: install pywin32
      when: _install_pkg|changed or reset|bool
      raw: pip install pypiwin32==219
      register: _pywin32
      changed_when: _pywin32.stdout.find('Installing ') >= 0


- name: upload bot sources
  tags: upload-src
  hosts: windows-devel
  tasks:
    - name: create tarball with source code
      command: tar -c -f "{{local_temp}}.dz-src.tgz" -C "{{local_src_dir}}" --exclude "*.pyc" {{bot_sources}}
      delegate_to: localhost
      notify: clear local temp

    - name: upload source tarball
      win_copy: src="{{local_temp}}.dz-src.tgz" dest="{{win_temp}}.dz-src.tgz"
      notify: clear win temp

    - name: clear build directory
      win_file: path="{{win_build_dir}}" state=absent

    - name: create build directory
      win_file: path="{{win_build_dir}}" state=directory

    - name: unpack source code
      win_command: 7z x -y -ttar -r "{{win_temp}}.dz-src.tgz"
                   chdir="{{win_build_dir}}"
  handlers:
    - name: clear local temp
      shell: rm -rf {{local_temp}}*
      delegate_to: localhost

    - name: clear win temp
      raw: "rm -force -recurse {{win_temp}}*"


- name: build the bot
  tags: build-bot
  hosts: windows-devel
  tasks:
    - name: install python requirements
      win_command: pip install -r requirements/bot.txt
                   chdir="{{win_build_dir}}"
      register: _pip_requirements
      changed_when: _pip_requirements.stdout.find('Installing ') >= 0

    - name: clear build files
      when: reset|bool
      win_file: name="{{win_build_dir}}/{{item}}" state=absent
      with_items:
        - build
        - dist

    - name: build bot executable
      win_command: PyInstaller.exe "{{ reset|ternary('--clean','') }}" -y inst/bot.spec
                   chdir="{{win_build_dir}}"


- name: download build files
  tags: fetch-build
  hosts: windows-devel
  tasks:
    - name: create zip archive with build results
      win_command: 7z a "{{win_temp}}.bot-dist.zip" bot
                   chdir="{{win_build_dir}}/dist"
      notify: clear win temp

    - name: fetch build results
      fetch: src="{{win_temp}}.bot-dist.zip"
             dest="{{local_dist_dir}}/dz-bot-dist-{{win_bitness}}.zip"
             flat=yes
  handlers:
    - name: clear win temp
      raw: "rm -force -recurse {{win_temp}}*"


- name: prefetch installer files (optional step)
  tags: prefetch-install
  hosts: linux-devel
  tasks:
    - name: create local directory for distribution
      file: path={{local_dist_dir}} state=directory

    - name: download unzip executable
      get_url: url={{unzip_url}} dest={{local_dist_dir}}/ force=no

    - name: download nssm archive, if needed
      get_url: url={{nssm_url}} force=no
               dest="{{ local_dist_dir }}/{{ nssm_url|basename }}"
      register: _download_nssm

    - name: check whether phantomjs has been downloaded
      # Bitbucket, the phantomjs distribution server, forbids requesting the
      # Last-Modified date, so we just check whether downloaded file exists.
      stat: path="{{ local_dist_dir }}/{{ phantomjs_url|basename }}"
      register: _stat_phantomjs

    - name: download phantomjs archive, if needed
      get_url: url={{phantomjs_url}}
               dest="{{ local_dist_dir }}/{{ phantomjs_url|basename }}"
      when: _stat_phantomjs.stat.exists == false


- name: create preliminary installer script (optional step)
  tags: make-script
  hosts: windows-prod
  vars:
    install_script: dz-bot-install.{{inventory_hostname}}.ps1
  tasks:
    - name: create local directory for distribution
      file: path={{local_dist_dir}} state=directory
      delegate_to: localhost

    - name: create installer script
      template: src=../templates/install-bot.ps1.j2
                dest={{local_dist_dir}}/{{install_script}}
      delegate_to: localhost
...
