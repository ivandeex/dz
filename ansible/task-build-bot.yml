---
- name: install python 2
  tags: install
  hosts: windows-build

  tasks:
    - name: install o/s packages
      win_chocolatey: name={{item}} upgrade={{reset|bool}}
      with_items:
        - upx
        - 7zip.commandline

    - name: install python 2.7
      win_chocolatey: name=python2 upgrade={{reset|bool}}
      register: _install_python2

    - name: current system path
      raw: "[System.Environment]::GetEnvironmentVariable('PATH', 'machine')"
      register: _system_path
      changed_when: false

    - name: put python2 on system path
      # Ansible does not support path appending, so we use SetEnvironmentVariable.
      # PR: https://github.com/ansible/ansible-modules-extras/issues/2215
      when: item not in _system_path.stdout.split(';')
      raw: "[System.Environment]::SetEnvironmentVariable('PATH', [System.Environment]::GetEnvironmentVariable('PATH', 'machine') + ';{{item}}', 'machine')"
      with_items:
        - 'C:\tools\python2'
        - 'C:\tools\python2\Scripts'

    - name: upgrade pip
      when: _install_python2|changed or reset|bool
      raw: python -m pip install --upgrade pip setuptools wheel
      register: _upgrade_pip
      changed_when: _upgrade_pip.stdout.find('Installing ') >= 0


- name: upload bot sources
  tags: upload-src
  hosts: windows-build

  tasks:
    - name: create tarball with source code
      command: tar -c -f "{{local_temp}}.dz-src.tgz" -C "{{local_src_dir}}" --exclude "*.pyc" {{bot_sources}}
      delegate_to: localhost
      notify: clear local temp

    - name: upload source tarball
      win_copy: src="{{local_temp}}.dz-src.tgz" dest="{{win_temp}}.dz-src.tgz"
      notify: clear win temp

    - name: clear build directory
      win_file: path="{{win_build_dir}}" state=absent
      when: reset|bool

    - name: create build directory
      win_file: path="{{win_build_dir}}" state=directory

    - name: unpack source code
      win_unzip: src="{{win_temp}}.dz-src.tgz" dest="{{win_build_dir}}"
                 rm=yes recurse=yes

  handlers:
    - name: clear local temp
      shell: rm -rf {{local_temp}}*
      delegate_to: localhost

    - name: clear win temp
      raw: rm -recurse {{win_temp}}*


- name: build the bot
  tags: build-bot
  hosts: windows-build

  tasks:
    - name: install python requirements
      win_command: pip install -r requirements/bot.txt
                   chdir="{{win_build_dir}}"
      register: _pip_requirements
      changed_when: _pip_requirements.stdout.find('Installing ') >= 0

    - name: clear build files
      when: reset|bool
      win_file: name="{{win_build_dir}}/{{item}}" state=absent
      with_items:
        - build
        - dist

    - name: build bot executable
      win_command: PyInstaller.exe "{{ reset|ternary('--clean','') }}" -y inst/bot.spec
                   chdir="{{win_build_dir}}"


- name: download build files
  tags: fetch-build
  hosts: windows-build

  tasks:
    - name: create partial distribution
      win_command: 7z a "{{win_temp}}.bot-dist.zip" bot
                   chdir="{{win_build_dir}}/dist"
      notify: clear win temp

    - name: fetch partial distribution
      fetch: src="{{win_temp}}.bot-dist.zip"
             dest="{{local_work_dir}}/_bot-dist.zip"
             flat=yes

  handlers:
    - name: clear win temp
      raw: rm -recurse {{win_temp}}*


- name: add nssm and phantomjs to the build
  tags: make-dist
  hosts: linux-build

  tasks:
    - name: verify that build files are ready
      stat: path="{{local_work_dir}}/_bot-dist.zip"
      register: _stat_build_files

    - assert:
        that: _stat_build_files.stat.exists
        msg: you must build and download build files in advance

    - name: create local directory for distribution
      file: path={{local_dist_dir}} state=directory

    - name: download nssm archive, if needed
      get_url: url={{nssm_url}} dest={{nssm_zip_path}} force=no
      register: _download_nssm

    - name: unpack nssm archive
      unarchive: src={{nssm_zip_path}} dest={{local_work_dir}}
      when: _download_nssm|changed

    - name: check whether phantomjs has been downloaded
      # Bitbucket, the phantomjs distribution server, forbids requesting the
      # Last-Modified date, so we just check whether downloaded file exists.
      stat: path={{phantomjs_zip_path}}
      register: _stat_phantomjs

    - name: download phantomjs archive, if needed
      get_url: url={{phantomjs_url}} dest={{phantomjs_zip_path}}
      when: _stat_phantomjs.stat.exists == false

    - name: unpack phantomjs archive
      unarchive: src={{phantomjs_zip_path}} dest={{local_work_dir}}
      when: _stat_phantomjs.stat.exists == false

    - name: create folder to unpack build files
      file: path="{{local_temp}}-dist" state=directory
      notify: clear local temp

    - name: unpack build files
      unarchive: src="{{local_work_dir}}/_bot-dist.zip"
                 dest="{{local_temp}}-dist" copy=false
      notify: clear local temp

    - name: copy nssm executable
      command: cp "{{local_work_dir}}/{{nssm_zip_name}}/win64/nssm.exe"
                  "{{local_temp}}-dist/bot"
               creates="{{local_temp}}-dist/bot/nssm.exe"

    - name: copy phantomjs executable
      command: cp "{{local_work_dir}}/{{phantomjs_zip_name}}/bin/phantomjs.exe"
                  "{{local_temp}}-dist/bot"
               creates="{{local_temp}}-dist/bot/phantomjs.exe"

    - name: remove old distribution
      file: path="{{local_dist_dir}}/dz-bot-dist.zip" state=absent

    - name: repack distribution
      command: zip -r "{{local_dist_dir}}/dz-bot-dist.zip" bot
               chdir="{{local_temp}}-dist"
      register: _repack_dist

    - name: remove build files
      file: path="{{local_work_dir}}/_bot-dist.zip" state=absent
      when: _repack_dist|success and reset|bool

  handlers:
    - name: clear local temp
      shell: rm -rf {{local_temp}}*
...
